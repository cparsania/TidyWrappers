#'
#'  ggplot2::mpg %>% remove_all_zero_vars()
#'
#'  ###########################################
#'
#'  tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
#'  tbl %>% remove_all_zero_vars()
#'
#' }
remove_all_zero_vars <- function(tbl){
mm <-  as_mapper(~ .x %>% select_if( ~ ( (. == 0) %>% all(.)  %>% `!`) ))
tbl %>% mm()
}
ggplot2::mpg %>% remove_all_zero_vars()
tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
tbl %>% remove_all_zero_vars()
tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4)
tbl2
tbl2 %>% remove_all_zero_vars()
#'
#'  ###########################################
#'
#'  tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
#'  tbl
#'  tbl %>% get_zero_vars()
#'
#'  tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4)
#'  tbl2 %>% get_zero_vars()
#' }
get_zero_vars <- function(tbl){
mm <-   as_mapper(~ .x %>% select_if( ~ ( (. == 0) %>% all(.)) ) %>% colnames() )
tbl %>% mm()
}
#'
#'  ###########################################
#'
#'  tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
#'  tbl
#'  tbl %>% get_zero_vars()
#'
#'  tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4)
#'  tbl2 %>% get_zero_vars()
#' }
get_zero_vars <- function(tbl){
mm <-   as_mapper(~ .x %>% select_if( ~ ( (. == 0) %>% all(.)) ) %>% colnames() )
tbl %>% mm()
}
ggplot2::mpg %>% get_zero_vars()
get_zero_vars <- function(tbl){
mm <-   as_mapper(~ .x %>% select_if( ~ ( (. == 0) %>% all(.)) ) %>% colnames() )
tbl %>% mm()
}
ggplot2::mpg %>% get_zero_vars()
tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
tbl %>% get_zero_vars()
tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4)
tbl2 %>% get_zero_vars()
tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4 , yy = 0)
tbl2 %>% get_zero_vars()
#'
#'  ###########################################
#'
#'  tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
#'  tbl
#'  tbl %>% get_zero_vars()
#'
#'  tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4 , yy = 0)
#'  tbl2 %>% get_zero_vars()
#' }
get_zero_vars <- function(tbl){
mm <-   purrr::as_mapper(~ .x %>% dplyr::select_if( ~ ( (. == 0) %>% all(.)) ) %>% colnames() )
tbl %>% mm()
}
ggplot2::mpg %>% get_zero_records()
#'
#'  ###########################################
#'
#'  tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
#'  tbl
#'  tbl %>% get_zero_vars()
#'
#'  tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4 , yy = 0)
#'  tbl2 %>% get_zero_vars()
#' }
get_zero_records <- function(tbl){
mm <- purrr::as_mapper(~ .x %>% dplyr::filter_if(is.numeric , dplyr::all_vars( . == 0) ))
tbl %>% mm()
}
ggplot2::mpg %>% get_zero_records()
install.packages(devtools)
.libPaths()
.Library
install.packages("devtools")
usethis::use_package(type = "importfrom" ,package = "dplyr")
usethis::use_package(type = "imports" ,package = "dplyr")
usethis::use_package(type = "imports" ,package = "purrr")
tbl <- tibble::tibble(x = letters[1:5] , y = NA , z = c(1,2,3,NA,5) )
tbl %>% tbl_keep_vars_NA_all()
llibrary(package)
llibrary(tidyverse)
library(tidyverse)
tbl %>% tbl_keep_vars_NA_all()
#' @return a tbl.
#' @export
#'
#' @examples
#' \dontrun{
#'  tbl <- tibble::tibble(x = letters[1:5] , y = NA , z = c(1,2,3,NA,5) )
#'  tbl %>% tbl_keep_vars_NA_all()
#' }
#'
#' @seealso \code{\link[TidyWrappers]{tbl_remove_vars_NA_all}}
tbl_keep_vars_NA_all <- function(tbl){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
mm <-  purrr::as_mapper(~ .x %>% dplyr::select_if( ~ ( (is.na(.)) %>% all(.,na.rm = T)) ))
tbl %>% mm()
}
tbl %>% tbl_keep_vars_NA_all()
tbl
tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
tbl
tbl
tbl %>% tbl_keep_vars_zero_all()
#' \dontrun{
#'  tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 )
#'  tbl
#'  tbl %>% tbl_keep_vars_zero_all()
#'
#'  tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4)
#'  tbl2 %>% tbl_keep_vars_zero_all()
#' }
#'
#' @seealso \code{\link[TidyWrappers]{tbl_remove_vars_zero_all}}
tbl_keep_vars_zero_all <- function(tbl){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
mm <-  purrr::as_mapper(~ .x %>% dplyr::select_if( ~ ( (. == 0) %>% all(.,na.rm = T)) ))
tbl %>% mm()
}
tbl %>% tbl_keep_vars_zero_all()
tbl <- tibble::tibble(x = letters[1:5] , y = NA , z = c(1,2,3,NA,5) )
tbl %>% tbl_keep_vars_NA_any()
#' Keep columns / variables  having atlease one NA from a tbl. \code{tbl_keep_vars_NA_any()} takes care of both  numeric and non numeric columns.
#' @return a tbl.
#' @export
#'
#' @examples
#' \dontrun{
#'  tbl <- tibble::tibble(x = letters[1:5] , y = NA , z = c(1,2,3,NA,5) )
#'  tbl %>% tbl_keep_vars_NA_any()
#' }
#' @seealso \code{\link[TidyWrappers]{tbl_remove_vars_NA_any}}
tbl_keep_vars_NA_any <- function(tbl){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
mm <-  purrr::as_mapper(~ .x %>% dplyr::select_if( ~ ( (is.na(.)) %>% any(.,na.rm = T)) ))
tbl %>% mm()
}
tbl %>% tbl_keep_vars_NA_any()
tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 ,a = 0:4 , b = 1:5)
tbl
tbl %>% tbl_keep_vars_zero_any()
#'
#'  tbl <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0 ,a = 0:4 , b = 1:5)
#'  tbl
#'  tbl %>% tbl_keep_vars_zero_any()
#'
#'  tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4)
#'  tbl2 %>% tbl_keep_vars_zero_any()
#' }
#'
#' @seealso \code{\link[TidyWrappers]{tbl_remove_vars_zero_any}}
tbl_keep_vars_zero_any <- function(tbl){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
mm <-  purrr::as_mapper(~ .x %>% dplyr::select_if( ~ ( (. == 0) %>% any(.,na.rm = T)) ))
tbl %>% mm()
}
tbl %>% tbl_keep_vars_zero_any()
tbl2 <- tibble(x = letters[1:5] , y = LETTERS[1:5] , z = 0  , xx = 0:4)
tbl2 %>% tbl_keep_vars_zero_any()
devtools::document()
pkgdown::build_reference()
renv::activate()
renv::activate()
.Library
renv::record("renv@0.8.3")
library(renv)
renv::status()
renv::snapshot()
renv::status()
?renv::restore()
renv::restore()
install.packages(Matix)
install.packages("Matrix")
renv::restore()
renv::restore()
install.packages("nlme")
renv::restore()
install.packages("mgcv")
?renv::restore(library = )
library
.libPaths
.libPaths()
?renv::restore()
renv::restore()
install.packages("openssl")
renv::restore()
tbl_replace_numeric <- function(tbl, value , replace_by ){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , . ) ))
tbl %>% mm(value , replace_by)
}
mtcars
mtcars %>% tibble::as_tibble()
library(magrittr)
mtcars %>% tibble::as_tibble()
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0, "Chirag")
library(tidyverse)
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0, "Chirag")
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0, 1)
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0, 100000000000000)
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0,9999)
#' @title  Replace numeric value in a tibble.
#' @description In a given tibble a numeric value can be replaced by another numeric value
#' @param tbl
#' @param value
#' @param replace_by
#'
#' @return
#' @export
#'
#' @examples
tbl_replace_numeric <- function(tbl, value , replace_by ){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , . ) ))
tbl %>% mm(value , replace_by)
}
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0,9999)
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric("c",9999)
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(,9999)
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0,"9999")
mtcars %>% tibble::as_tibble() %>% tbl_replace_numeric(0,9999)
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5] ) ,
y = c(LETTERS[1:5],LETTERS[1:5]) , z = 1:10 )
tbl %>% tbl_replace_string(pattern = "a" , replacement = "a_changed")
tbl %>% tbl_replace_string("[aeiou]", toupper)
tbl %>% tbl_replace_string("([aeiou])", "")
tbl %>% tbl_replace_string(c("a", "e", "i"), "-")
tbl %>% tbl_replace_string("b", NA_character_)
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5] ) ,
y = c(LETTERS[1:5],LETTERS[1:5]) , z = 1:10 )
tbl
tbl
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5] ),
y = sample(1:5, 10 ,replace = T),
z = sample(1:5), 10,replace = T)
#' @title  Replace numeric value in a tibble.
#' @description In a given tibble a numeric value can be replaced by another numeric value.
#' @param tbl a tbl.
#' @param value a numeric which is to be replaced from \code{tbl}.
#' @param replace_by a numeric replacement for \code{value}.
#'
#' @return a tbl
#' @export
#'
#' \dontrun{
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5]),
#' @title  Replace numeric value in a tibble.
#' @description In a given tibble a numeric value can be replaced by another numeric value.
#' @param tbl a tbl.
#' @param value a numeric which is to be replaced from \code{tbl}.
#' @param replace_by a numeric replacement for \code{value}.
#'
#' @return a tbl
#' @export
#'
#' \dontrun{
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5]),
y = sample(1:5, 10 ,replace = T),
z = sample(1:5, 10,replace = T))
tbl %>% tbl_replace_numeric
tbl %>%
tbl %>%
tbl %>%
tbl %>%
#'
#' }
tbl_replace_numeric <- function(tbl, value , replace_by ){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , . ) ))
tbl %>% mm(value , replace_by)
}
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5]),
y = sample(1:5, 10 ,replace = T),
z = sample(1:5, 10,replace = T))
tbl
tbl %>% tbl_replace_numeric(1, 1000)
tbl_replace_numeric
tbl_replace_numeric <- function(tbl, value , replace_by ){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , . ) ))
tbl %>% mm(value , replace_by)
}
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>%
tbl %>%
tbl %>%
tbl %>%
#'
#' }
tbl_replace_numeric <- function(tbl, value , replace_by ){
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>%
tbl %>%
tbl %>%
tbl %>%
#'
#' }
tbl_replace_numeric <- function(tbl, value , replace_by ){
tbl_replace_numeric <- function(tbl, value , replace_by ){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , purrr::is_double(.) ) ))
tbl %>% mm(value , replace_by)
}
tbl_replace_numeric <- function(tbl, value , replace_by ){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , purrr::is_double(.) ) ))
tbl %>% mm(value , replace_by)
}
tbl_replace_numeric <- function(tbl, value , replace_by ){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , purrr::is_double(.) )))
tbl %>% mm(value , replace_by)
}
{
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , purrr::is_double(.) )))
tbl %>% mm(value , replace_by)
}
tbl %>%
tbl %>%
tbl %>%
tbl %>%
#'
#' }
tbl_replace_numeric <- function(tbl, value , replace_by ){
tbl %>%
tbl %>%
tbl %>%
tbl %>%
#'
#' }
#'
#'
tbl_replace_numeric <- function(tbl, value , replace_by){
tbl_replace_numeric <- function(tbl, value , replace_by){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , purrr::is_double(.) )))
tbl %>% mm(value , replace_by)
}
#' @title  Replace numeric value in a tibble.
#' @description In a given tibble a numeric value can be replaced by another numeric value.
#' @param tbl a tbl.
#' @param value a numeric which is to be replaced from \code{tbl}.
#' @param replace_by a numeric replacement for \code{value}.
#'
#' @return a tbl
#' @export
#'
#' \dontrun{
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5]),
y = sample(1:5, 10 ,replace = T),
z = sample(1:5, 10,replace = T))
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>%
tbl %>%
tbl %>%
tbl %>%
#'
#' }
#'
#'
tbl_replace_numeric <- function(tbl, value , replace_by){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , purrr::is_double(.) )))
tbl %>% mm(value , replace_by)
}
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5]),
y = sample(1:5, 10 ,replace = T),
z = sample(1:5, 10,replace = T))
tbl %>% tbl_replace_numeric(1, 1000)
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5]),
y = sample(1:5, 10 ,replace = T),
z = sample(1:5, 10,replace = T))
tbl
tbl %>% tbl_replace_numeric(1, 1000)
tbl_replace_numeric <- function(tbl, value , replace_by){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , purrr::is_double(.) )))
tbl %>% mm(value , replace_by)
}
tbl %>% tbl_replace_numeric(1, 1000)
tbl_replace_numeric <- function(tbl, value , replace_by){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == 0 , !!..3 , as.double(.) )))
tbl %>% mm(value , replace_by)
}
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>% tbl_replace_numeric(1, 1000)
set.seed(1234)
tbl <- tibble::tibble(x = c(letters[1:5] ,letters[1:5]),
y = sample(1:5, 10 ,replace = T),
z = sample(1:5, 10,replace = T))
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>% tbl_replace_numeric(1, 1000)
tbl_replace_numeric <- function(tbl, value , replace_by){
if ( !is_tibble(tbl)  ) stop("tbl is not tbl")
stopifnot(is.numeric(value))
stopifnot(is.numeric(replace_by))
mm <- purrr::as_mapper(~ ..1 %>% dplyr::mutate_if(is.numeric , ~ if_else(. == !!..2 , !!..3 , as.double(.) )))
tbl %>% mm(value , replace_by)
}
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>% tbl_replace_numeric(1, 1000)
tbl %>% tbl_replace_numeric(4, 1000)
tbl %>% tbl_replace_numeric(2, 1000)
renv::snapshot()
.Library
.libPaths()
.libPaths()
renv::refresh()
renv::status()
library(TidyWrappers)
library(TidyWrappers)
library(TidyWrappers)
renv::activate()
.libPaths()
.Library
paste("R", getRversion()[1, 1:2], sep = "-")
root <- Sys.getenv("RENV_PATHS_LIBRARY", unset = "renv/library")
root
prefix <- paste("R", getRversion()[1, 1:2], sep = "-")
prefix
devel <-
identical(R.version[["status"]],   "Under development (unstable)") ||
identical(R.version[["nickname"]], "Unsuffered Consequences")
if (devel)
prefix <- paste(prefix, R.version[["svn rev"]], sep = "-r")
devel
file.path(root, prefix, R.version$platform)
getwd
getwd(0)
getwd()
renv::deactivate()
.Library
.libPaths()
renv::activate()
.libPaths()
install.packages(remedy)
install.packages("remedy")
renv::snapshot()
renv::status()
install.packages("RTools")
install.packages("Rtools")
install.packages("Rtools")
Ren
install.packages(ren)
install.packages("renv")
renv::snapshot()
install.packages("pkgdown")
install.packages(c("highlight", "pkgdown", "rematch2", "remedy"))
install.packages("pkgdonw")
pkgdown")
install.packages(c("highlight", "pkgdown", "rematch2", "remedy"))
install.packages("tools")
install.packages("pdflatex")
?
?pdflatex
??pdflatex
install.packages("rmarkdown")
library(TidyWrappers)
install.packages("roxygen2")
roxygen2::roxygenise()
cli_alert_info
roxygen2::roxygenise()
roxygen2::roxygenise()
install.packages("cli")
roxygen2::roxygenise()
rm(list = ls())
roxygen2::roxygenise()
